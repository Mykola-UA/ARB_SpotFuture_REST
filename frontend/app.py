import streamlit as st
import pandas as pd
from core.price_collector import fetch_live_prices
from core.arbitrage_engine import find_arbitrage_opportunities

st.set_page_config(page_title="Live Arbitrage Scanner", layout="wide")
st.title("üü° Live Arbitrage Scanner (Spot & Futures)")

if st.button("–û–Ω–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑"):
    spot_data = fetch_live_prices()
    arbs = find_arbitrage_opportunities(spot_data)
    if not arbs:
        st.warning("–í–∞–ª—ñ–¥–Ω–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        df = pd.DataFrame(arbs)

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∏–≤–æ–¥—É
        columns = [
            "symbol", "buy_exchange", "type_buy", "sell_exchange", "type_sell",
            "buy_price", "sell_price", "price_diff",
            "spread", "net_profit", "usdt_profit", "volume", "created_at"
        ]
        columns = [c for c in columns if c in df.columns]

        df_display = df[columns].copy()
        df_display = df_display.rename(columns={
            "symbol": "–ü–∞—Ä–∞",
            "buy_exchange": "–ö—É–ø–∏—Ç–∏",
            "type_buy": "–¢–∏–ø –∫—É–ø—ñ–≤–ª—ñ",
            "sell_exchange": "–ü—Ä–æ–¥–∞—Ç–∏",
            "type_sell": "–¢–∏–ø –ø—Ä–æ–¥–∞–∂—É",
            "buy_price": "–¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ",
            "sell_price": "–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            "price_diff": "–†—ñ–∑–Ω–∏—Ü—è",
            "spread": "–í–∞–ª–æ–≤–∏–π —Å–ø—Ä–µ–¥ (%)",
            "net_profit": "–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (%)",
            "usdt_profit": "USDT (–Ω–∞ 100)",
            "volume": "–û–± º—î–º",
            "created_at": "–ß–∞—Å"
        })

        st.dataframe(df_display, use_container_width=True)
else:
    st.info("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤.")
