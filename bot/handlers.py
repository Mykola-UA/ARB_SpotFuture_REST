from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.cryptopay_api import create_cryptopay_invoice
from utils.webhook import load_invoices, save_invoices
from config import TARIFFS
from notify.subscriptions import is_paid, get_days_left

# --- –ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: /start, /help, –±—É–¥—å-—è–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active = is_paid(user_id)
    left = get_days_left(user_id)
    status_text = (
        f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ({left:.1f} –¥–Ω—ñ–≤)" if active
        else "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ö—É–ø—ñ—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤!"
    )

    keyboard = [
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∞ USDT", callback_data="pay_usdt")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data="check_status")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üë§ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        f"{status_text}\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=markup,
        parse_mode="HTML"
    )

# --- Callback'–∏ (–æ–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    if data == "pay_usdt":
        # –í–∏–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—É (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ - —Ç—ñ–ª—å–∫–∏ sub_7)
        sub_type = "sub_7"
        price = TARIFFS[sub_type]
        pay_url, invoice_id = create_cryptopay_invoice(
            user_id, price, asset="USDT", description=f"Subscription for {user_id} {sub_type}"
        )
        invoices_map = load_invoices()
        invoices_map[invoice_id] = {
            "user_id": user_id,
            "tariff": sub_type
        }
        save_invoices(invoices_map)

        keyboard = [
            [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ CryptoBot", url=pay_url)],
            [InlineKeyboardButton("–í–∂–µ –æ–ø–ª–∞—Ç–∏–≤", callback_data="already_paid")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>¬´–û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ CryptoBot¬ª</b> (–≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è @CryptoBot)\n"
            "2Ô∏è‚É£ –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É USDT\n"
            "3Ô∏è‚É£ –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É —Ü–µ–π –±–æ—Ç ‚Äî –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!\n\n"
            "<i>–Ø–∫—â–æ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–í–∂–µ –æ–ø–ª–∞—Ç–∏–≤¬ª.</i>",
            parse_mode="HTML",
            reply_markup=markup
        )
        await query.answer()
    elif data == "check_status":
        active = is_paid(user_id)
        left = get_days_left(user_id)
        if active:
            msg = f"‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{left:.1f}</b>"
        else:
            msg = "‚ùå –£ –≤–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞."
        await query.answer()
        await query.message.reply_text(msg, parse_mode="HTML")
    elif data == "already_paid":
        await query.answer("–ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –∑–∞–∑–≤–∏—á–∞–π –ø—Ä–æ—Ç—è–≥–æ–º 1-2 —Ö–≤–∏–ª–∏–Ω.")
    else:
        await query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /check
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active = is_paid(user_id)
    left = get_days_left(user_id)
    if active:
        msg = f"‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{left:.1f}</b>"
    else:
        msg = "‚ùå –£ –≤–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞."
    await update.message.reply_text(msg, parse_mode="HTML")

# --- –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (–∑–∞–≥–ª—É—à–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ - –¥–æ–ø–∏—à–∏ –ª–æ–≥—ñ–∫—É)
async def startbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).")

async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –∞–∫—Ç–∏–≤–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞).")

async def badex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("BadEx –∫–æ–º–∞–Ω–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞).")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).")
