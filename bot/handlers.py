import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
)
from utils.cryptopay_api import create_cryptopay_invoice
from utils.webhook import load_invoices, save_invoices
from config import TARIFFS

# /start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∞ USDT", callback_data="pay_usdt")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏ USDT –∫–∞—Ä—Ç–∫–æ—é", callback_data="buy_usdt_card")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ!\n\n"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏–≥–Ω–∞–ª—ñ–≤, –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data == "pay_usdt":
        await pay_usdt_handler(query, context)
    elif data == "buy_usdt_card":
        await buy_usdt_card_handler(query, context)
    elif data == "already_paid":
        await query.answer("–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å—É –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ó–∞–∑–≤–∏—á–∞–π —Ü–µ –∑–∞–π–º–∞—î 1-2 —Ö–≤–∏–ª–∏–Ω–∏.")
    else:
        await query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É CryptoPay —Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ USDT
async def pay_usdt_handler(query, context):
    user_id = query.from_user.id
    sub_type = "sub_7"         # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤–∏–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—É
    price = TARIFFS[sub_type]

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ invoice —á–µ—Ä–µ–∑ CryptoPay
    pay_url, invoice_id = create_cryptopay_invoice(
        user_id, price, asset="USDT", description=f"Subscription for {user_id} {sub_type}"
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ invoice_id ‚Üî user_id + tariff
    invoices_map = load_invoices()
    invoices_map[invoice_id] = {
        "user_id": user_id,
        "tariff": sub_type
    }
    save_invoices(invoices_map)

    keyboard = [
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ CryptoBot", url=pay_url)],
        [InlineKeyboardButton("–í–∂–µ –æ–ø–ª–∞—Ç–∏–≤", callback_data="already_paid")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>¬´–û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ CryptoBot¬ª</b> (–≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è @CryptoBot)\n"
        "2Ô∏è‚É£ –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É USDT\n"
        "3Ô∏è‚É£ –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É —Ü–µ–π –±–æ—Ç ‚Äî –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!\n\n"
        "<i>–Ø–∫—â–æ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–í–∂–µ –æ–ø–ª–∞—Ç–∏–≤¬ª.</i>",
        parse_mode="HTML",
        reply_markup=markup
    )
    await query.answer()

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ –∫—É–ø–∏—Ç–∏ USDT –∫–∞—Ä—Ç–∫–æ—é
async def buy_usdt_card_handler(query, context):
    await query.message.reply_text(
        "üí≥ –©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é:\n"
        "1. –ü—Ä–∏–¥–±–∞–π—Ç–µ USDT —á–µ—Ä–µ–∑ –±—É–¥—å-—è–∫—É –±—ñ—Ä–∂—É –∞–±–æ —Å–µ—Ä–≤—ñ—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Binance P2P, WhiteBIT, Kuna, BestChange).\n"
        "2. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞ –π –æ–ø–ª–∞—Ç—ñ—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∞ USDT¬ª."
    )
    await query.answer()

# (–î–æ–¥–∞–π —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∏–∫–ª–∞–¥) ===
def main():
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    # –î–æ–¥–∞–π —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏

    app.run_polling()

if __name__ == "__main__":
    main()
